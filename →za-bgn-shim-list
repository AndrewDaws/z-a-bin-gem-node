# -*- mode: sh; sh-indentation: 4; sh-basic-offset: 4; indent-tabs-mode: nil;  -*-

# Copyright 2020 Sebastian Gniazdowski
# License: MIT

# Synopsis:
#   zinit shim-list [-l|--this-dir] [-c|--cat] [-i|--from-ices] \
#		    [-o|--one-line] [-l|--long]
#

emulate -LR zsh
setopt extended_glob warn_create_global typeset_silent \
        no_short_loops rc_quotes

autoload is-at-least
local is_58
is-at-least 5.8 && is_58=1

local -a opt_help opt_this_dir opt_cat opt_from_ices opt_one_line \
	opt_long
zparseopts -D -E ${is_58:+-F} \
	      h=opt_help -help=opt_help \
	      t=opt_this_dir -this-dir=opt_this_dir \
	      c=opt_cat -cat=opt_cat \
	      i=opt_from_ices -from-ices=opt_from_ices \
	      l=opt_long -long=opt_long \
	      o=opt_one_line -one-line=opt_one_line || \
		{ 
		  print -Pr "$ZINIT[col-error]Error:$ZINIT[col-msg2]" \
		    "Incorrect options given to" \
		    "$ZINIT[col-obj]shim-list$ZINIT[col-msg2], try" \
		    "$ZINIT[col-obj]--help%f"
		  return 1
		}

(( ${#opt_help} )) && {
    print -P "$ZINIT[col-obj]Usage:%f\n" \
	"zinit shim-list [-l|--this-dir] [-c|--cat] [-i|--from-ices] \\\\\n" \
	"	    [-o|--one-line] [-l|--long]"
    return 0
}

local nl=$'\n' brace='{' quote='"'
local pattern='(#s)\#!/usr/bin/env zsh

function * {
    local bindir="'

local -a cands
cands=( $ZPFX/bin/*(.-NDL-1000) )

local rempat="(${ZINIT[PLUGINS_DIR]}|${ZINIT[SNIPPETS_DIR]}"
rempat+="|${ZINIT[PLUGINS_DIR]/.zinit/.zplugin}"
rempat+="|${ZINIT[SNIPPETS_DIR]/.zinit/.zplugin})"

local file
for file ( $cands ) {
    local body="$(<$file)"
    if [[ -n ${body[(r)$pattern]} ]] {
	print -r ${${:-$opt_one_line$opt_long}:+-n} -- ${file:t}" "
	if (( ${#opt_long} )) {
	    if [[ $body = (#b)$~pattern([^$nl]##)$nl* ]] {
		(( ${+functions[.zinit-first]} )) || builtin source "${ZINIT[BIN_DIR]}/zinit-side.zsh"
		.zinit-any-colorify-as-uspl2 "${${${match[1]##$~rempat}##/##}%\"}"
		print -r -- "$REPLY"
	    }
	}
    }
}
(( ${#opt_one_line} )) && print

# vim:ft=zsh:sw=4:sts=4:noet:
